---
title: "Demonstração Infográficos"
bibliography: references.bib
---

# Introdução ao RMarkdown e ao Quarto

## O que é RMarkdown?

-   O R Markdown é um pacote para criação de ***relatórios automatizados*** utilizando as linguagens de programação R, Python e de marcação Markdown.

> Linguagens de marcação utilizam marcadores (símbolos, tags, funções) para formatar um arquivo de texto simples. Os exemplos mais famosos de linguagem de marcação são o HTML e LaTeX.

-   A linguagem de marcação Markdown serve para construirmos e formatarmos diversos formatos de arquivos (PDF, HTML, Word, entre outros) a partir de um arquivo de texto com regras bem simples.

-   O **RMarkdown** é uma extensão de Markdown que nos permite **colocar código de R**.

Referência do quarto: <https://quarto.org/docs/websites>.

## O que podemos fazer com essa ferramenta?

-   Possibilita automatizar a criar produtos com o R e Python, através do pacote Reticulate @reticulate que integra o R com Python.

- Com ele também é possível fazer a conexão com o SAS através da biblioteca SASPY

[![SAS-PYTHON-R](https://img.youtube.com/vi/watch?v=A2-Ti-c6w8c&feature=youtu.be/0.jpg)](https://www.youtube.com/watch?v=A2-Ti-c6w8c&feature=youtu.be "SAS-PYTHON-R")


<https://rstudio.github.io/reticulate/index.html>
<https://bookdown.org/yihui/rmarkdown-cookbook/eng-python.html>

-   Com exceção das interpretações e conclusões, só precisamos montá-lo uma vez. A partir daí, com apenas um clique podemos:

    -   replicar o relatório para diversas versões da base de dados (modificações, correções, processos periódicos);

    -   replicar o relatório para diversas variáveis.

    -   Criar documentos reprodutíveis

    -   Criar diversos tipos de produtos
    
## Exemplos de integraçao R e Python    

```{r, setup}
library(reticulate)
```

Crie uma variável x na sessão do Python

```{python}
x = [1, 2, 3]
```

Acesse a variável Python `x` em um pedaço de código R:

```{r}
py$x
```

Crie uma nova variável `y` na sessão Python usando R,
e passe um quadro de dados para `y`:

```{r}
py$y <- head(cars)
```

Imprima a variável `y` em Python:

```{python}
print(y)
```

## Algumas aplicações

```{r}
#| echo: false
exemplos_rmd <- tibble::tibble(pacote = as.character(),
               desc = as.character(),
               exemplos = as.character()) |>
  
 
  
  tibble::add_row(pacote = "[distill](https://rstudio.github.io/distill/)",
                  desc = "Blogs e sites",
                  exemplos = "- [RStudio AI Blog](https://blogs.rstudio.com/ai/)") |>
  
  tibble::add_row(pacote = "[bookdown](https://bookdown.org/)",
                  desc = "Livros",
                  exemplos = "- [Livro Ciência de Dados em R](https://livro.curso-r.com/) <br> - [R for Data Science](https://r4ds.had.co.nz/)") |>
  
  tibble::add_row(pacote = "[xaringan](https://github.com/yihui/xaringan)",
                  desc = "Apresentações",
                  exemplos = "- Essa apresentação  <br> - [Build Your Own Universe - Garrick Aden-Buie & Travis Gerke](https://www.garrickadenbuie.com/talk/build-your-own-universe/)") |>
  
  tibble::add_row(pacote = "[pagedown](https://github.com/rstudio/pagedown)",
                  desc = "Currículos, cartas e trabalhos acadêmicos",
                  exemplos = "- [Relatório do Observatório da Insolvência](https://abjur.github.io/obsFase2/relatorio/obs_recuperacoes_abj.pdf) <br>  - [Currículo do William Amorim](https://williamorim.github.io/resume/) ") |>
  
    tibble::add_row(pacote = "[flexdashboard](https://rmarkdown.rstudio.com/flexdashboard/)",
                  desc = "Dashboards",
                  exemplos = "- [Tesouro Nacional](https://painelgfs.tesouro.gov.br/)") |>
  
  
  tibble::add_row(pacote = "[learnr](https://rstudio.github.io/learnr/)",
                  desc = "Tutoriais interativos",
                  exemplos = "- [Text mining with tidy data principles](https://juliasilge.shinyapps.io/learntidytext/) <br> - [Teacups, Giraffes,  & Statistics](https://tinystats.github.io/teacups-giraffes-and-statistics/)") |>
  
  tibble::add_row(pacote = "[rticles](https://github.com/rstudio/rticles)",
                  desc = "Artigos científicos",
                  exemplos = "   ") |> 
  tibble::add_row(pacote = " ",
                  desc = "Outros exemplos",
                  exemplos = "[Newsletter Garimpo](https://nucleo.jor.br/newsletters/garimpo)") 
  


exemplos_rmd |>
  #dplyr::slice(1:4) |> 
  knitr::kable(col.names = c("Pacote", "O que podemos fazer?", "Exemplos"))
```

## Estrutura dos relatórios 

Todo arquivo RMarkdown/Quarto terá a seguinte estrutura:

-   Um preâmbulo com configurações

``` yaml
---
title: "Relatório maravilhoso"
output: html_document
---
```

-   Blocos de texto (marcados em Markdown)

``` md
Texto em __RMarkdown/Quarto__!
```

-   Blocos de código (em R ou outra linguagem)

```` md
```{r}`r ''`
print("ola, codigo R")
```
````

> Dependendo do formato de saída, o documento pode precisar ser dividido em vários arquivos ou precisar de arquivos adicionais.

## Sintaxe Markdown

Utilizamos Markdown para marcar os textos do relatório.

Principais marcadores utilizados para formatar texto:

-   uma palavra entre asteriscos fica em itálico: `*texto*` é transformado em *texto*

-   uma palavra entre dois asteríscos fica em negrito: `**texto**` é transformado em **texto**

-   um ou mais hashtags viram títulos: `# Título muito grande`, `## Título grande`, `### Título médio`, `#### Título pequeno`, `##### Título muito pequeno`

-   hiperlinks podem ser criados com a estrutura `[texto](link)`:

-   `[link para o site da Curso-R](https://curso-r.com)` é transformado em [link para o site da Curso-R](https://curso-r.com).

-   para deixar o texto com `esse formato` (formato de código), apenas coloque o texto entre duas crases.

Material de consulta: [Livro: Ciência de Dados em R - Seção sobre Markdown](https://livro.curso-r.com/9-1-markdown.html)

## Visual Editor

-   As versões mais recentes do RStudio permitem usar o Visual Editor.

Leitura indicada:

-   <https://docs.posit.co/ide/user/ide/guide/documents/visual-editor.html>

```{r}
#| echo: false
#| out.width: 90%
#| fig.align: center
#| fig.cap: 'Fonte: Posit'
knitr::include_graphics("https://docs.posit.co/ide/user/ide/guide/documents/images/visual-editing.png")

```

## Chunks - Campos de código

-   Em um arquivo `.qmd` ou `.Rmd`, precisamos escrever nossos códigos dentro dos *chunks*. Para inserir um chunk, utilize o atalho `CTRL + ALT + I`.

-   É possível adicionar campos de código utilizando a seguinte sintaxe:

```` md
```{r}`r ''`
codigo em R aqui
```
````

-   Dentro dos chunks você poderá escrever códigos em R como se fosse o nosso script .R tradicional.

Material de consulta: [Livro: Ciência de Dados em R - Seção sobre R Markdown](https://livro.curso-r.com/9-2-r-markdown.html)

## YAML

-   Os arquivos `.qmd` ou `.Rmd` começam com códigos em yaml/yml.

-   Esse "bloco" de código é delimitado por `---`.

-   Apresenta metadados e parâmetros utilizados para gerar o documento final.

```{yml}
---
title: "Relatórios automáticos"
subtitle: "O poder do RMarkdown"
author: "Curso-R"
date: "Março de 2021"
output: xaringan::moon_reader
---
```

## Render!

-   Para gerarmos o relatório na extensão desejada, precisamos *renderizá-lo*, isto é, transformar o arquivo `.qmd` ou `.Rmd` em um PDF, HTML ou Word.

-   Isso pode ser feito no RStudio a partir dos botões `Knit` (.Rmd) ou `Render` (.qmd), que fica logo acima do script, ou pelo atalho `CTRL + SHIFT + K`.





## O que acabamos de fazer

```{r}
#| out-width: 60%
#| fig-cap: "Fontr: Blog do Yihui Xie"
#| echo: false
#| fig-align: center
knitr::include_graphics("https://bookdown.org/yihui/rmarkdown-cookbook/images/workflow.png")
```

```{r}
#| out-width: 60%
#| fig-cap: "Fonte: quarto.org"
#| echo: false
#| fig-align: center
knitr::include_graphics("https://quarto.org/docs/get-started/hello/images/rstudio-qmd-how-it-works.png")
```

## Principais saídas

```{r}
#| echo: false
#| out.width: 45%
#| fig-cap: "Ilustração por Allison Horst"
knitr::include_graphics("https://alison.netlify.app/rmd-valentine/images/rmarkdown_hedgehog_wide.png")
```

## Relatórios (.Rmd)

### HTML

```{yml}
output: html_document
```



### Word (.docx)

```{yml}
output: word_document
```

## Relatórios (.qmd)

### HTML

```{yml}
format: html
```



### Word (.docx)

```{yml}
format: docx
```

## Relatórios (.Rmd)

### PDF (com $\TeX$)

```{yml}
output: pdf_document
```

Caso não tenha o $\TeX$:

```{r}
#| eval: false
#| include: true
tinytex::install_tinytex()
```

## Relatórios (.qmd)

### PDF (com $\TeX$)

```{yml}
format: pdf
```

Caso não tenha o $\TeX$:

```{r}
#| eval: false
#| include: true
tinytex::install_tinytex()
```

## Relatórios

### PDF com o pacote Pagedown

```{yml}
output: html_document
knit: pagedown::chrome_print
```

Ou utilize a função `pagedown::chrome_print()` em um relatório em HTML:

```{r}
#| eval: false
#| include: true
pagedown::chrome_print("relatorio.html")
```

Obs: Por enquanto não existe uma alternativa Quarto a isso.

## Apresentações (.Rmd)

-   **Powerpoint**

```{yml}
output: powerpoint_presentation
```

-   **HTML**

```{yml}
output: xaringan::moon_reader
```

## Apresentações (.qmd)

-   **Powerpoint**

```{yml}
format: pptx
```

-   **HTML**

```{yml}
format: revealjs
```

## Resumo

-   Podemos escrever arquivos com código, resultados, textos, imagens, etc.

-   O mesmo conteúdo pode ser disponibilizado em diferentes tipos de saída.

-   Nos metadados (`yaml`) do arquivo `.Rmd` ou `.qmd`, definimos a saída no parâmetro `output`.

-   Mais saídas e comparação completa:

    -   [RMarkdown](https://rmarkdown.rstudio.com/formats.html)
    -   [Quarto](https://quarto.org/docs/faq/rmarkdown.html)
